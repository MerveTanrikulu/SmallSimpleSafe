//Start with a sample class
class mae.util.Small
//MSG is a class field in Small.
//We want to call this object m.
m = Small.MSG; //--> "Small is beautiful"
//What is the char at position 9? 
//+'b'
m.charAt(9); //--> b
//What is the position of "b" in m?
//+9
//+Linear search may be slow on large strings
m.indexOf("b"); //--> 9
//What is the position of "z" in m?
//+Doesn't exist
m.indexOf("z"); //--> -1
//How many chars in m? 
//+18
m.length(); //--> 18
//What is its hash code?
//+an unpredictable integer
m.hashCode(); //--> -1179683660

//Find a substring of m
//+"beautiful"
//+This would be the same as m.substring(9, 18)
b = m.substring(9); //--> "beautiful"
//Does m start with "be"? 
//+No
m.startsWith("be"); //--> false
//Does m.substring(9) start with "be"? 
//+Yes
m.startsWith("be", 9); //--> true
//Does m end with "beautiful"?
//+Yes
m.endsWith(b); //--> true
//Search for a blank from the end
//Find the last occurrence of blank
//+8
m.lastIndexOf(32); //--> 8

//Convert b to upper case
//+"BEAUTIFUL"
u = b.toUpperCase(); //--> "BEAUTIFUL"
//Is u equal to b? 
//+No
u.equals(b); //--> false
//How do they compare? 
//+u is less than b 
u.compareTo(b); //--> -32
//Is u equal to b, ignoring case? 
//+Yes
u.equalsIgnoreCase(b); //--> true
//How do they compare, ignoring case? 
//+u is equal to b 
u.compareToIgnoreCase(b); //--> 0
//Replace all blank chars with underline
//+"Small_is_beautiful"
x = m.replace(' ', '_'); //--> "Small_is_beautiful"

//Get a char array from m
//+18 chars
ca = m.toCharArray(); //--> char[18]
//Get a byte array from m
//+18 bytes
ba = m.getBytes(); //--> byte[18]
//Back to another String from ba
class java.lang.String
//Back to another String from ba
//+Looks like the original String
s = new String(ba); //--> "Small is beautiful"
//Is it equal to the original String m? 
//+Yes
s.equals(m); //--> true
