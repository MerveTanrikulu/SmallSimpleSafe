//This lesson is about a small JFrame
class java.lang.String
//This lesson is about a small JFrame
//with several swing components
//First we make a String
s = new String("Small_and_Simple"); //--> "Small_and_Simple"

//Then, a JFrame 
class javax.swing.JFrame
//Then, a JFrame with that title
//+Initial size is 0 and not visible
frm = new JFrame(s); //--> frame5 - Small&Simple
//We should set bounds on the screen
//
//+(This step is only for demo,
//+pack() method would do it at the end)
frm.setBounds(0, 250, 300, 180);
//Show the window, it is empty yet
//
//+(This step is only for demo, should 
//+be called after pack() at the end)
frm.setVisible(true);
//This window will DISPOSE_ON_CLOSE
//SSS cannot use primitive constants
frm.setDefaultCloseOperation(2);

//Get the ContentPane to add components
pan = frm.getContentPane(); //--> null.contentPane
//We need BorderLayout
class java.awt.BorderLayout
//We need BorderLayout with gaps
lay = new BorderLayout(8, 8); //--> java.awt.BorderLayout[hgap=...
//Set the Layout
pan.setLayout(lay);
//#1: a JLabel
class javax.swing.JLabel
//#1: a JLabel
//use title String and CENTER
lab = new JLabel(s, 0); //--> JLabel
//Add it to the top of the ContentPane 
//not yet visible
pan.add(lab, "North");
//Make it visible
//
//+(This step is only for demo,
//+pack() method would do it at the end)
pan.validate();

//#2: a JTextArea
class javax.swing.JTextArea
//#2: a JTextArea
//use the same String again as text
txt = new JTextArea(s); //--> JTextArea
//Large components may need scrolling
class javax.swing.JScrollPane
//Large components may need scrolling
//txt will be added to JScrollPane p1 ...
p1 = new JScrollPane(txt); //--> JScrollPane
//... and p1 to the left of the ContentPane 
pan.add(p1, "West"); 
//Make p1 visible
//
//+(This step is only for demo,
//+pack() method would do it at the end)
pan.validate();

//#3: a JTree
class javax.swing.JTree
//#3: a JTree
//default constructor uses some random data
jt = new JTree(); //--> JTree
//Large components may need scrolling
class javax.swing.JScrollPane
//Large components may need scrolling
//jt will be added to JScrollPane p2 ...
p2 = new JScrollPane(jt); //--> JScrollPane
//... and p2 to the center of the ContentPane 
pan.add(p2, "Center");
//Make p2 visible
//
//+(This step is only for demo,
//+pack() method would do it at the end)
pan.validate();

//Doesn't look nice...
class javax.swing.BorderFactory
//Doesn't look nice...
//Let's make a border ...
emp = BorderFactory.createEmptyBorder(8, 8, 8, 8); //--> @3d1402
//... and use it on the ContentPane 
pan.setBorder(emp);
//How about some colors?
class java.awt.Color
//How about some colors?
//I like green-blue
c1 = Color.cyan; //--> java.awt.Color[r=0,g=255,b=... 
//Set the color of the ContentPane 
pan.setBackground(c1); 

//Recalculate all sizes
//This is the most important step:
//it should replace all validate() calls
//and setVisible(true) should follow pack()
frm.pack();
//Show the containment hierarchy
//
//+(This step is only for demo)
//+An array of Components
a2 = Menu.toTree(pan); //--> Component[25]
